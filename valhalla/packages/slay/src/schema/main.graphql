scalar JSON

type Query {
  heliconeRequest(
    limit: Int
    offset: Int
    filters: [HeliconeRequestFilter!]
  ): [HeliconeRequest]
  aggregatedHeliconeRequest(
    properties: [PropertyFilter!]
  ): AggregatedHeliconeRequest
}

type AggregatedHeliconeRequest {
  id: ID!
  cost: Float
  count: Int
  costUSD: Float
  firstRequest: String!
  lastRequest: String!
}

type HeliconeRequest {
  id: ID!
  costUSD: Float!
  model: String!
  createdAt: String!
  prompt: String
  response: String
  cacheHits: Int
  properties: [Property]
  values: [Value]
  responseBody: JSON
  requestBody: JSON
  latency: Float
  feedback: Feedback
}

type Feedback {
  rating: Boolean!
}

input HeliconeRequestFilter {
  id: NumberOperators
  requestId: TextOperators
  prompt: TextOperators
  response: TextOperators
  user: TextOperators
  property: PropertyFilter
  createdAt: DateOperators
  feedback: FeedbackFilter
}

input FeedbackFilter {
  rating: Boolean
}

input PropertyFilter {
  name: String!
  value: TextOperators!
}

input HeliconeJobFilter {
  id: TextOperators
  name: TextOperators
  description: TextOperators
  created_at: DateOperators
  updated_at: DateOperators
  property: PropertyFilter
}

input HeliconeNodeFilter {
  id: TextOperators
  name: TextOperators
  description: TextOperators
  created_at: DateOperators
  updated_at: DateOperators
  property: PropertyFilter
}

input ValueFilter {
  name: String!
  value: TextOperators!
}

type Property {
  name: String
  value: String
}

type Value {
  name: String
  value: String
}

input TextOperators {
  equals: String
  like: String
  ilike: String
  contains: String
  not_equals: String
}

input NumberOperators {
  equals: Float
  gte: Float
  lte: Float
  not_equals: Float
}

input DateOperators {
  gte: String
  lte: String
  lt: String
  gt: String
}
